# This code suffers from a chicken-and-the-egg paradox
# It won't work unless you already have permissions to the sub-account, and
# if you do, then you don't really need to run this code.

variable "mgmt_account" {}

variable "aws_profile" {}

provider "aws" {
  alias = subaccount
  profile = "${var.aws_profile}"
}

resource "aws_iam_role" "OrganizationAccountAccessRole" {
  name = "OrganizationAccountAccessRole"
  provider = "subaccount"

  assume_role_policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "sts:AssumeRole",
      "Principal": {
        "AWS": "arn:aws:iam::${var.mgmt_account}:root"
      },
      "Effect": "Allow",
      "Sid": ""
    }
  ]
}
EOF
}

resource "aws_iam_policy" "AdministratorAccess" {
  name = "AdministratorAccess"
  provider = "subaccount"

  policy = <<EOF
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": "*",
            "Resource": "*"
        }
    ]
}
EOF
}

resource "aws_iam_role_policy_attachment" "test-ami-attach" {
  provider = "subaccount"
  role       = "${aws_iam_role.OrganizationAccountAccessRole.name}"
  policy_arn = "${aws_iam_policy.AdministratorAccess.arn}"
}
